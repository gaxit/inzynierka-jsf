package pl.rea.client.webmethods.users;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "UserService", targetNamespace = "users")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface UserService {


    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns users.UserCanonical
     */
    @WebMethod(action = "getUser")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUser", targetNamespace = "users", className = "users.GetUser")
    @ResponseWrapper(localName = "getUserResponse", targetNamespace = "users", className = "users.GetUserResponse")
    public UserCanonical getUser(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod(action = "isUserLogged")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isUserLogged", targetNamespace = "users", className = "users.IsUserLogged")
    @ResponseWrapper(localName = "isUserLoggedResponse", targetNamespace = "users", className = "users.IsUserLoggedResponse")
    public boolean isUserLogged(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod(action = "isAdminLogged")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isAdminLogged", targetNamespace = "users", className = "users.IsAdminLogged")
    @ResponseWrapper(localName = "isAdminLoggedResponse", targetNamespace = "users", className = "users.IsAdminLoggedResponse")
    public boolean isAdminLogged(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<users.UserCanonical>
     */
    @WebMethod(action = "getUserList")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUserList", targetNamespace = "users", className = "users.GetUserList")
    @ResponseWrapper(localName = "getUserListResponse", targetNamespace = "users", className = "users.GetUserListResponse")
    public List<UserCanonical> getUserList(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod(action = "createUser")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createUser", targetNamespace = "users", className = "users.CreateUser")
    @ResponseWrapper(localName = "createUserResponse", targetNamespace = "users", className = "users.CreateUserResponse")
    public boolean createUser(
        @WebParam(name = "arg0", targetNamespace = "")
        UserCanonical arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod(action = "isAnybodyLogged")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isAnybodyLogged", targetNamespace = "users", className = "users.IsAnybodyLogged")
    @ResponseWrapper(localName = "isAnybodyLoggedResponse", targetNamespace = "users", className = "users.IsAnybodyLoggedResponse")
    public boolean isAnybodyLogged(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod(action = "logOut")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "logOut", targetNamespace = "users", className = "users.LogOut")
    @ResponseWrapper(localName = "logOutResponse", targetNamespace = "users", className = "users.LogOutResponse")
    public boolean logOut(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod(action = "editUser")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "editUser", targetNamespace = "users", className = "users.EditUser")
    @ResponseWrapper(localName = "editUserResponse", targetNamespace = "users", className = "users.EditUserResponse")
    public boolean editUser(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        UserCanonical arg2);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod(action = "deleteUser")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteUser", targetNamespace = "users", className = "users.DeleteUser")
    @ResponseWrapper(localName = "deleteUserResponse", targetNamespace = "users", className = "users.DeleteUserResponse")
    public boolean deleteUser(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod(action = "userExists")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "userExists", targetNamespace = "users", className = "users.UserExists")
    @ResponseWrapper(localName = "userExistsResponse", targetNamespace = "users", className = "users.UserExistsResponse")
    public boolean userExists(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "logIn")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "logIn", targetNamespace = "users", className = "users.LogIn")
    @ResponseWrapper(localName = "logInResponse", targetNamespace = "users", className = "users.LogInResponse")
    public String logIn(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

}
